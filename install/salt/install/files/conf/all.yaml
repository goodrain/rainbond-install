version: '2.1'
services:
{% if 'manage' in grains['id'] %}
- name: rbd-hub
  endpoints:
  - name: HUB_ENDPOINTS
    protocol: 
    port: 5000
  health:
    name: rbd-hub
    model: http
    address: 127.0.0.1:5000
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-hub
  start: >-
    docker run --name rbd-hub
    --network host
    --memory 1024M
    -v /grdata/services/registry/:/var/lib/registry
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-registry']['image'] }}:{{ pillar['rainbond-modules']['rbd-registry']['version'] }}
  stop: docker stop rbd-hub
  restart_policy: always
  restart_sec: 10
- name: rbd-repo
  endpoints:
  - name: REPO_ENDPOINTS
    protocol: 
    port: 8081
  health:
    name: rbd-repo
    model: http
    address: 127.0.0.1:8081/artifactory/libs-release
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-repo
  start: >-
    docker run --name rbd-repo
    --network host
    -v /grdata/services/artifactory-{{ grains['nodename'] }}:/var/opt/jfrog/artifactory
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-repo']['image'] }}:{{ pillar['rainbond-modules']['rbd-repo']['version'] }}
  stop: docker stop rbd-repo
  restart_policy: always
  restart_sec: 10
- name: rbd-entrance
  endpoints:
  - name: ENTRANCE_ENDPOINTS
    protocol: http
    port: 6200
  health:
    name: rbd-entrance
    model: http
    address: 127.0.0.1:6200/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-entrance
  start: >-
    docker run --name rbd-entrance
    --network host
    --memory 1024M
    -e DEFAULT_HTTP_PORT=80
    -e DEFAULT_HTTPS_PORT=443
    -v {{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg:/opt/rainbond/etc/kubernetes/kubecfg
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-entrance']['image'] }}:{{ pillar['rainbond-modules']['rbd-entrance']['version'] }}
    --plugin-name=openresty
    --plugin-opts=urls=${MLB_ENDPOINTS|-}
    --kube-conf=/opt/rainbond/etc/kubernetes/kubecfg/admin.kubeconfig
    --log-level=debug
    --etcd-endpoints=${ETCD_ENDPOINTS}
    --run-mode=sync
  stop: docker stop rbd-entrance
  restart_policy: always
  restart_sec: 10
- name: rbd-api
  endpoints:
  - name: API_ENDPOINTS
    protocol: http
    port: 8888
  health:
    name: rbd-api
    model: http
    address: {{ grains['mip'][0] }}:8888/v2/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-api
  start: >-
    docker run --name rbd-api
    --network host
    --memory 1024M
    -e LicenseSwitch="off"
    -e EX_DOMAIN={{ pillar['domain'] }}
    -v /grdata:/grdata
    -v /grdata/downloads/log:/grdata/logs
    -v {{ pillar['rbd-path'] }}/etc/rbd-api:/etc/goodrain
    -v {{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg:/etc/goodrain/kubernetes
    -v {{ pillar['rbd-path'] }}/logs/docker_logs:/data/docker_logs
    -v {{ pillar['rbd-path'] }}/logs/rbd-api:/logs
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-api']['image'] }}:{{ pillar['rainbond-modules']['rbd-api']['version'] }}
    --etcd=${ETCD_ENDPOINTS} 
    --api-addr-ssl={{ grains['mip'][0] }}:8443
    --api-addr={{ grains['mip'][0] }}:8888
    --log-level=debug 
    --mysql="{{ pillar['database']['mysql']['user'] }}:{{ pillar['database']['mysql']['pass'] }}@tcp({{ pillar['database']['mysql']['host'] }}:{{ pillar['database']['mysql']['port'] }})/region"
    --api-ssl-enable=true
    --api-ssl-certfile=/etc/goodrain/region.goodrain.me/ssl/server.pem
    --api-ssl-keyfile=/etc/goodrain/region.goodrain.me/ssl/server.key.pem
    --client-ca-file=/etc/goodrain/region.goodrain.me/ssl/ca.pem
  stop: docker stop rbd-api
  restart_policy: always
  restart_sec: 10
- name: rbd-chaos
  endpoints:
  - name: CHAOS_ENDPOINTS
    protocol: http
    port: 3228
  health:
    name: rbd-chaos
    model: http
    address: 127.0.0.1:3228/v2/builder/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-chaos
  start: >-
    docker run --name rbd-chaos
    --network host
    --memory 2048M
    -e SOURCE_DIR="/cache/source"
    -e CACHE_DIR="/cache"
    -v /logs:/logs
    -v /grdata:/grdata
    -v /cache:/cache
    -v /var/run:/var/run
    -v /grdata/services/ssh:/root/.ssh
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-chaos']['image'] }}:{{ pillar['rainbond-modules']['rbd-chaos']['version'] }}
    --etcd-endpoints=${ETCD_ENDPOINTS} --log-level=debug --mysql="{{ pillar['database']['mysql']['user'] }}:{{ pillar['database']['mysql']['pass'] }}@tcp({{ pillar['database']['mysql']['host'] }}:{{ pillar['database']['mysql']['port'] }})/region"
  stop: docker stop rbd-chaos
  restart_policy: always
  restart_sec: 10
- name: rbd-mq
  endpoints:
  - name: MQ_ENDPOINTS
    protocol: http
    port: 6301
  health:
    name: rbd-mq
    model: http
    address: 127.0.0.1:6301/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-mq
  start: >-
    docker run --name rbd-mq
    --network host
    --memory 1024M
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-mq']['image'] }}:{{ pillar['rainbond-modules']['rbd-mq']['version'] }}
    --log-level=debug --etcd-endpoints=${ETCD_ENDPOINTS}
  stop: docker stop rbd-mq
  restart_policy: always
  restart_sec: 10
- name: rbd-webcli
  endpoints:
  - name: WEBCLI_ENDPOINTS
    protocol: http
    port: 7171
  health:
    name: rbd-webcli
    model: http
    address: 127.0.0.1:7171/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-webcli
  start: >-
    docker run --name rbd-webcli
    --network host
    --memory 1024M
    -v /usr/local/bin/kubectl:/usr/bin/kubectl
    -v /root/.kube:/root/.kube
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-webcli']['image'] }}:{{ pillar['rainbond-modules']['rbd-webcli']['version'] }}
    --hostIP={{ grains['mip'][0] }} --etcd-endpoints=${ETCD_ENDPOINTS}
  stop: docker stop rbd-webcli
  restart_policy: always
  restart_sec: 10
- name: rbd-worker
  endpoints:
  - name: WORKER_ENDPOINTS
    protocol: http
    port: 6369
  health:
    name: rbd-worker
    model: http
    address: 127.0.0.1:6369/worker/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-worker
  start: >-
    docker run --name rbd-worker
    --network host
    --memory 1024M
    -e K8S_MASTER=http://127.0.0.1:8181
    -e CUR_NET=calico
    -e EX_DOMAIN={{ pillar['domain'] }}
    -v {{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg:/etc/goodrain/kubernetes
    -v /grdata:/grdata
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-worker']['image'] }}:{{ pillar['rainbond-modules']['rbd-worker']['version'] }}
    --log-level=info --etcd-endpoints=${ETCD_ENDPOINTS} --kube-config="/etc/goodrain/kubernetes/admin.kubeconfig" --mysql="{{ pillar['database']['mysql']['user'] }}:{{ pillar['database']['mysql']['pass'] }}@tcp({{ pillar['database']['mysql']['host'] }}:{{ pillar['database']['mysql']['port'] }})/region"
  stop: docker stop rbd-worker
  restart_policy: always
  restart_sec: 10
- name: rbd-monitor
  endpoints:
  - name: MONITOR_ENDPOINTS
    protocol: http
    port: 3329
  - name: PROMETHEUS_ENDPOINTS
    protocol: http
    port: 9999
  health:
    name: rbd-monitor
    model: http
    address: 127.0.0.1:3329/monitor/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-monitor
  start: >-
    docker run --name rbd-monitor
    --network host
    --memory 2048M
    -v {{ pillar['rbd-path'] }}/data/prom:/prometheusdata
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-monitor']['image'] }}:{{ pillar['rainbond-modules']['rbd-monitor']['version'] }}
    --etcd-endpoints=${ETCD_ENDPOINTS} --advertise-addr={{ grains['mip'][0] }}:9999  --web.listen-address=0.0.0.0:9999 --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheusdata --storage.tsdb.no-lockfile --storage.tsdb.retention=7d --log.level=info
  stop: docker stop rbd-monitor
  restart_policy: always
  restart_sec: 10
- name: rbd-eventlog
  endpoints:
  - name: EVENTLOG_ENDPOINTS
    protocol: http
    port: 6363
  health:
    name: rbd-eventlog
    model: http
    address: {{ grains['mip'][0] }}:6363/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-eventlog
  start: >-
    docker run --name rbd-eventlog
    --network host
    --memory 1024M
    -e K8S_MASTER=http://127.0.0.1:8181
    -v {{ pillar['rbd-path'] }}/logs/rbd-eventlog:/var/log
    -v {{ pillar['rbd-path'] }}/etc/rbd-node/node_host_uuid.conf:/opt/rainbond/etc/node/node_host_uuid.conf
    -v /grdata/downloads/log:/grdata/logs
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-eventlog']['image'] }}:{{ pillar['rainbond-modules']['rbd-eventlog']['version'] }}
    --cluster.bind.ip={{ grains['mip'][0] }} --db.type=mysql --db.url="{{ pillar['database']['mysql']['user'] }}:{{ pillar['database']['mysql']['pass'] }}@tcp({{ pillar['database']['mysql']['host'] }}:{{ pillar['database']['mysql']['port'] }})/region" --discover.etcd.addr=${ETCD_ENDPOINTS} --eventlog.bind.ip={{ grains['mip'][0] }} --websocket.bind.ip={{ grains['mip'][0] }} --nodeid-file=/opt/rainbond/etc/node/node_host_uuid.conf
  stop: docker stop rbd-eventlog
  restart_policy: always
  restart_sec: 10
- name: rbd-app-ui
  endpoints:
  - name: APP_UI_ENDPOINTS
    protocol: http
    port: 7070
  health:
    name: rbd-app-ui
    model: http
    address: 127.0.0.1:7070
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-app-ui
  start: >-
    docker run --name rbd-app-ui
    --network host
    --memory 1024M
    -e MANAGE_SECRET_KEY={{ pillar['secretkey'] }}
    -e MYSQL_HOST={{ pillar['database']['mysql']['host'] }}
    -e MYSQL_PORT={{ pillar['database']['mysql']['port'] }}
    -e MYSQL_USER={{ pillar['database']['mysql']['user'] }}
    -e MYSQL_PASS={{ pillar['database']['mysql']['pass'] }}
    -e MYSQL_DB=console
    -v /grdata/services/console:/data
    -v {{ pillar['rbd-path'] }}/etc/rbd-api:/etc/goodrain
    -v {{ pillar['rbd-path'] }}/logs/rbd-app-ui/goodrain.log:/tmp/goodrain.log
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-app-ui']['image'] }}:{{ pillar['rainbond-modules']['rbd-app-ui']['version'] }}
  stop: docker stop rbd-app-ui
  restart_policy: always
  restart_sec: 10
- name: etcd
  endpoints:
  - name: ETCD_ENDPOINTS
    protocol: http
    port: 2379
  health:
    name: etcd
    model: http
    address: 127.0.0.1:2379/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm etcd
  start: LOCAL_IP={{ grains['mip'][0] }} {{ pillar['rbd-path'] }}/scripts/start-etcd.sh
  stop: docker stop etcd
  restart_policy: always
  restart_sec: 10
- name: kube-apiserver
  endpoints:
  - name: APISERVER_ENDPOINTS
    protocol: http
    port: 8181
  health:
    name: kube-apiserver
    model: http
    address: 127.0.0.1:8181/version
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm kube-apiserver
  start: >-
    /usr/bin/docker 
    run 
    --privileged 
    --restart=always 
    --net=host 
    --name kube-apiserver 
    --volume={{ pillar['rbd-path'] }}/etc/kubernetes:{{ pillar['rbd-path'] }}/etc/kubernetes 
    {{ pillar['private-image-domain'] }}/{{pillar['kubernetes']['api']['image']}}:{{pillar['kubernetes']['api']['version']}} 
    --insecure-bind-address=127.0.0.1 
    --insecure-port=8181 
    --advertise-address=0.0.0.0 --bind-address=0.0.0.0 
    --etcd-servers=${ETCD_ENDPOINTS}
    --admission-control=ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota 
    --authorization-mode=RBAC 
    --runtime-config=rbac.authorization.k8s.io/v1beta1 
    --experimental-bootstrap-token-auth 
    --token-auth-file={{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg/token.csv 
    --tls-cert-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/kubernetes.pem 
    --tls-private-key-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/kubernetes-key.pem 
    --client-ca-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca.pem 
    --service-account-key-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca-key.pem 
    --logtostderr=true 
    --service-cluster-ip-range=11.1.0.0/16
  stop: docker stop kube-apiserver
  restart_policy: always
  restart_sec: 10
- name: kube-scheduler
  endpoints:
  - name: SCHEDULER_ENDPOINTS
    protocol: http
    port:
  health:
    name: kube-scheduler
    model: tcp
    address: 127.0.0.1:10251
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm kube-scheduler
  start: >-
    /usr/bin/docker 
    run 
    --privileged 
    --restart=always 
    --net=host 
    --name kube-scheduler 
    --volume={{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg:{{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg 
    {{ pillar['private-image-domain'] }}/{{pillar['kubernetes']['schedule']['image']}}:{{pillar['kubernetes']['schedule']['version']}} 
    --logtostderr=true 
    --v=2 
    --master=127.0.0.1:8181 
    --custom-config={{ pillar['rbd-path'] }}/etc/kubernetes/custom.conf 
    --leader-elect=true
  stop: docker stop kube-scheduler
  restart_policy: always
  restart_sec: 10
- name: kube-controller-manager
  endpoints:
  - name: CONTROLLER_MANAGER_ENDPOINTS
    protocol:
    port: 10252
  health:
    name: kube-controller-manager
    model: tcp
    address: 127.0.0.1:10252
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm kube-controller-manager
  start: >-
    /usr/bin/docker 
    run 
    --privileged 
    --restart=always 
    --net=host 
    --name kube-controller-manager 
    --volume={{ pillar['rbd-path'] }}/etc/kubernetes:{{ pillar['rbd-path'] }}/etc/kubernetes 
    {{ pillar['private-image-domain'] }}/{{pillar['kubernetes']['manager']['image']}}:{{pillar['kubernetes']['manager']['version']}} 
    --master=127.0.0.1:8181 
    --pod-eviction-timeout=3m0s 
    --custom-config={{ pillar['rbd-path'] }}/etc/kubernetes/custom.conf 
    --leader-elect=true 
    --logtostderr=true 
    --address=127.0.0.1 
    --v=2 
    --cluster-name=kubernetes 
    --cluster-signing-cert-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca.pem 
    --cluster-signing-key-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca-key.pem 
    --service-account-private-key-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca-key.pem 
    --root-ca-file={{ pillar['rbd-path'] }}/etc/kubernetes/ssl/ca.pem
  stop: docker stop kube-controller-manager
  restart_policy: always
  restart_sec: 10
{% if grains['id'] == "manage01" %}
- name: rbd-db
  endpoints:
  - name: DB_ENDPOINTS
    protocol: tcp
    port: 3306
  health:
    name: rbd-db
    model: tcp
    address: 127.0.0.1:3306
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-db
  start: >-
    docker run --name rbd-db
    --network host
    --memory 1024M
    -e MYSQL_ALLOW_EMPTY_PASSWORD="true"
    -v {{ pillar['rbd-path'] }}/data/rbd-db:/data
    -v {{ pillar['rbd-path'] }}/etc/rbd-db:/etc/mysql
    -i {{ pillar['private-image-domain'] }}/{{ pillar['database']['mysql']['image'] }}:{{ pillar['database']['mysql']['version'] }}
  stop: docker stop rbd-db
  restart_policy: always
  restart_sec: 10
{% if grains['node_role'][0] == "worker" %}
- name: kubelet
  endpoints:
  - name: KUBELET_ENDPOINTS
    protocol: http
    port: 10248
  health:
    name: kubelet
    model: tcp
    address: 127.0.0.1:10248
    time_interval: 5
  after:
    - docker
  type: simple
  start: >-
    /usr/local/bin/kubelet
    --address={{ grains['mip'][0] }}
    --port=10250
    --hostname_override={{ grains['uuid'] }}
    --kubeconfig={{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg/admin.kubeconfig 
    --require-kubeconfig 
    --cert-dir={{ pillar['rbd-path'] }}/etc/kubernetes/ssl 
    --cluster-domain=cluster.local. --hairpin-mode promiscuous-bridge 
    --cluster-dns={{ pillar['master-private-ip'] }}
    --register-node=false
    --max-pods=10000 
    --custom-config={{ pillar['rbd-path'] }}/etc/kubernetes/custom.conf 
    --network-plugin=cni 
    --network-plugin-dir={{ pillar['rbd-path'] }}/bin 
    --cni-conf-dir={{ pillar['rbd-path'] }}/etc/cni/ 
    --cpu-cfs-quota=false 
    --pod-infra-container-image=goodrain.me/pause-amd64:3.0 
    --logtostderr=true 
    --log-driver=streamlog 
    --maximum-dead-containers-per-container=0 
    --v=2
  restart_policy: always
  restart_sec: 10
{% endif %}
{% endif %}
{% else %}
- name: etcd-proxy
  endpoints:
  - name: ETCDPROXY_ENDPOINTS
    protocol: http
    port: 2379
  health:
    name: etcd-proxy
    model: cmd
    address: ((`ETCDCTL_API=3 etcdctl --endpoints=http://127.0.0.1:2379 endpoint health | grep " health" | wc -l` ==1))
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm etcd-proxy
  start: MASTER_IP={% for etcdmem in pillar.etcd.server.members %}{{ etcdmem.host}}:2379,{% endfor%} {{ pillar['rbd-path'] }}/scripts/start-etcdproxy.sh
  stop: docker stop etcd-proxy
  restart_policy: always
  restart_sec: 10
- name: kubelet
  endpoints:
  - name: KUBELET_ENDPOINTS
    protocol: http
    port: 10248
  health:
    name: kubelet
    model: tcp
    address: 127.0.0.1:10248
    time_interval: 5
  after:
    - docker
  type: simple
  start: >-
    /usr/local/bin/kubelet
    --address={{ grains['mip'][0] }}
    --port=10250
    --hostname_override={{ grains['uuid'] }}
    --kubeconfig={{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg/admin.kubeconfig 
    --require-kubeconfig 
    --cert-dir={{ pillar['rbd-path'] }}/etc/kubernetes/ssl 
    --cluster-domain=cluster.local. --hairpin-mode promiscuous-bridge 
    --cluster-dns={{ pillar['master-private-ip'] }}
    --register-node=false
    --max-pods=10000 
    --custom-config={{ pillar['rbd-path'] }}/etc/kubernetes/custom.conf 
    --network-plugin=cni 
    --network-plugin-dir={{ pillar['rbd-path'] }}/bin 
    --cni-conf-dir={{ pillar['rbd-path'] }}/etc/cni/ 
    --cpu-cfs-quota=false 
    --pod-infra-container-image=goodrain.me/pause-amd64:3.0 
    --logtostderr=true 
    --log-driver=streamlog 
    --maximum-dead-containers-per-container=0 
    --v=2
  restart_policy: always
  restart_sec: 10
- name: calico
  endpoints:
  - name: CALICO_ENDPOINTS
    protocol:
    port: 187
  health:
    name: calico
    model: cmd
    address: ((`calicoctl node status | grep 'Calico process is running' | wc -l` == 1))
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm calico
  start: >-
    /usr/bin/docker run --net=host 
    --privileged 
    --name=calico  
    --restart=always 
    -e NO_DEFAULT_POOLS= 
    -e CALICO_LIBNETWORK_ENABLED=true 
    -e IP={{ grains['mip'][0] }} 
    -e CALICO_LIBNETWORK_CREATE_PROFILES=true 
    -e CALICO_LIBNETWORK_LABEL_ENDPOINTS=false 
    -e CALICO_LIBNETWORK_IFPREFIX=cali 
    -e NODENAME=${HOSTNAME} 
    -e CALICO_NETWORKING_BACKEND=bird 
    -e IP6_AUTODETECTION_METHOD=first-found 
    -e ETCD_ENDPOINTS=http://{{ pillar.etcd.server.bind.get('host', '127.0.0.1') }}:2379 
    -v /var/log/calico:/var/log/calico 
    -v /var/run/calico:/var/run/calico 
    -v /lib/modules:/lib/modules 
    -v /run/docker/plugins:/run/docker/plugins 
    -v /var/run/docker.sock:/var/run/docker.sock 
    {{ pillar['private-image-domain'] }}/{{ pillar['network']['calico']['image'] }}:{{ pillar['network']['calico']['version'] }}
  stop: docker stop calico
  restart_policy: always
  restart_sec: 10
{% endif %}
- name: docker
  endpoints:
  - name: DOCKER_ENDPOINTS
    protocol: http
    port: 2376
  health:
    name: docker
    model: http
    address: 127.0.0.1:2376/version
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: calico
  endpoints:
  - name: CALICO_ENDPOINTS
    protocol:
    port: 187
  health:
    name: calico
    model: cmd
    address: ((`calicoctl node status | grep 'Calico process is running' | wc -l` == 1))
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm calico
  start: >-
    /usr/bin/docker run --net=host 
    --privileged 
    --name=calico  
    --restart=always 
    -e NO_DEFAULT_POOLS= 
    -e CALICO_LIBNETWORK_ENABLED=true 
    -e IP={{ grains['mip'][0] }} 
    -e CALICO_LIBNETWORK_CREATE_PROFILES=true 
    -e CALICO_LIBNETWORK_LABEL_ENDPOINTS=false 
    -e CALICO_LIBNETWORK_IFPREFIX=cali 
    -e NODENAME=${HOSTNAME} 
    -e CALICO_NETWORKING_BACKEND=bird 
    -e IP6_AUTODETECTION_METHOD=first-found 
    -e ETCD_ENDPOINTS=http://{{ pillar.etcd.server.bind.get('host', '127.0.0.1') }}:2379
    -v /var/log/calico:/var/log/calico 
    -v /var/run/calico:/var/run/calico 
    -v /lib/modules:/lib/modules 
    -v /run/docker/plugins:/run/docker/plugins 
    -v /var/run/docker.sock:/var/run/docker.sock 
    {{ pillar['private-image-domain'] }}/{{ pillar['network']['calico']['image'] }}:{{ pillar['network']['calico']['version'] }}
  stop: docker stop calico
  restart_policy: always
  restart_sec: 10
- name: rbd-lb
  endpoints:
{% if 'manage' in grains['id'] %}
  - name: MLB_ENDPOINTS
    protocol: http
    port: 10002
{% else %}
  - name: LB_ENDPOINTS
    protocol: http
    port: 80
{% endif %}
  health:
    name: rbd-lb
    model: http
    address: 127.0.0.1:10002/health
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: HUB=${HUB_ENDPOINTS} REPO=${REPO_ENDPOINTS} {{ pillar['rbd-path'] }}/scripts/init-lb.sh
  start: >-
    docker run --name rbd-lb
    --network host
    --memory 1024M
    -e HTTP_SUFFIX_URL={{ pillar['domain'] }}
    -e DEFAULT_PORT=80
    -v {{ pillar['rbd-path'] }}/etc/rbd-lb/dynamics:/usr/local/openresty/nginx/conf/dynamics
    -v {{ pillar['rbd-path'] }}/logs/rbd-lb:/usr/local/openresty/nginx/logs
    -v {{ pillar['rbd-path'] }}/install/install/pkgs/centos:/opt/rainbond/install/install/pkgs/centos
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-lb']['image'] }}:{{ pillar['rainbond-modules']['rbd-lb']['version'] }}
  stop: docker stop rbd-lb
  restart_policy: always
  restart_sec: 10
- name: storage
  health:
    name: storage
    model: cmd
    address: {{ pillar['rbd-path'] }}/health/storage.sh
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: local-dns
  health:
    name: local-dns
    model: cmd
    address: {{ pillar['rbd-path'] }}/health/local-dns.sh
    time_interval: 5
  after:
    - network.target
  requires:
    - network.target
  type: notify
  start: none
  restart_policy: always
  restart_sec: 10
- name: rbd-dns
  endpoints:
  - name: DNS_ENDPOINTS
    protocol: udp
    port: 53
  health:
    name: rbd-dns
    model: cmd
    address: {{ pillar['rbd-path'] }}/health/rbd-dns.sh
    time_interval: 5
  after:
    - docker
  type: simple
  pre_start: docker rm rbd-dns
  start: >-
    docker run --name rbd-dns
    --network host
    --memory 1024M
    -e VERBOSE=true
    -v {{ pillar['rbd-path'] }}/etc/kubernetes/kubecfg:/opt/rainbond/etc/kubernetes/kubecfg
    -i {{ pillar['private-image-domain'] }}/{{ pillar['rainbond-modules']['rbd-dns']['image'] }}:{{ pillar['rainbond-modules']['rbd-dns']['version'] }}
    --kubecfg-file=/opt/rainbond/etc/kubernetes/kubecfg/admin.kubeconfig
    --v=2
    --healthz-port=8089
    --dns-bind-address={{ grains['mip'][0] }}
    --nameservers={{ pillar.dns.get('current','114.114.114.114') }},{{ pillar.dns.slave }}
    --recoders=goodrain.me={{ pillar['master-private-ip'] }},*.goodrain.me={{ pillar['master-private-ip'] }}
  stop: docker stop rbd-dns
  restart_policy: always
  restart_sec: 10
